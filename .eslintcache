[{"/Users/tylergumb/Dropbox/DEV stuff/axios-play/src/reportWebVitals.js":"1","/Users/tylergumb/Dropbox/DEV stuff/axios-play/src/App.js":"2","/Users/tylergumb/Dropbox/DEV stuff/axios-play/src/index.js":"3","/Users/tylergumb/Dropbox/DEV stuff/axios-play/src/CountryCard/CountryCard.js":"4","/Users/tylergumb/Dropbox/DEV stuff/axios-play/src/Search/Search.js":"5","/Users/tylergumb/Dropbox/DEV stuff/axios-play/src/RegionFilter/RegionFilter.js":"6"},{"size":362,"mtime":1607974945028,"results":"7","hashOfConfig":"8"},{"size":4814,"mtime":1608064684696,"results":"9","hashOfConfig":"8"},{"size":500,"mtime":1607974945026,"results":"10","hashOfConfig":"8"},{"size":544,"mtime":1607979237048,"results":"11","hashOfConfig":"8"},{"size":252,"mtime":1608061121526,"results":"12","hashOfConfig":"8"},{"size":452,"mtime":1608061224035,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ln4rq8",{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tylergumb/Dropbox/DEV stuff/axios-play/src/reportWebVitals.js",[],"/Users/tylergumb/Dropbox/DEV stuff/axios-play/src/App.js",["28","29","30"],"import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport CountryCard from \"./CountryCard/CountryCard\";\nimport Search from \"./Search/Search\";\nimport RegionFilter from \"./RegionFilter/RegionFilter\";\n\nconst api = axios.create({\n  baseURL: \"https://restcountries.eu/rest/v2/\",\n});\n\n//Variable to store search and filter values to use in update function\nlet searchValue;\nlet filterValue;\n\n//********APP STARTED********\nconst App = () => {\n  //Set intial state for country data from API\n  const [countryState, setCountryState] = useState({\n    countries: [],\n  });\n\n  //function to load all data from API\n  const allCountries = () => {\n    console.log(\"all country load triggered\");\n    api.get(\"/all\").then((res) => {\n      setCountryState({ countries: res.data });\n    });\n  };\n\n  //Load initial country data ONLY once at start\n  useEffect(() => {\n    allCountries();\n  }, []);\n\n  //UPDATE FUNCTION triggered by change in search or filter fields\n  const update = (event) => {\n\n    //Flow when triggered by search\n    if (event.target.id === \"searchField\") {\n      searchValue = event.target.value;\n      {document.getElementById('regionFilterDropDown').selectedIndex=0;}\n      if (searchValue == null || searchValue === \"\") {\n        //when search field is cleared to empty\n        //LOAD ALL COUNTRIES DATA\n        allCountries();\n      } else {\n        //Otherwise load search results\n        api.get(\"/name/\" + searchValue).then((res) => {\n          setCountryState({ countries: res.data });\n        });\n      }\n    //Flow when triggered by filter  \n    } else if (event.target.id === \"regionFilterDropDown\") {\n      filterValue = event.target.value;\n      {document.getElementById('searchField').value=\"\";}\n      if (filterValue === \"All\") {\n        allCountries();\n      } else {\n        api.get(\"/region/\" + filterValue).then((res) => {\n          setCountryState({ countries: res.data });\n        });\n      }\n    }\n\n    //MADE ALL THIS LOGIC TO DO FILTER AND SEARCH AT SAME TIME BUT NOT SURE IF THIS IS POSSIBLE???\n    // //FLOW WHEN TRIGGERED BY SEARCH FIELD\n    // if (event.target.id === \"searchField\") {\n    //   searchValue = event.target.value;\n\n    //   //check if a filter applied as well\n    //   if (filterValue == null || filterValue === \"All\") {\n    //     if (searchValue == null || searchValue === \"\") {\n    //       //when search field is cleared to empty\n    //       //LOAD ALL COUNTRIES DATA\n    //       allCountries();\n    //     } else {\n    //       //Otherwise load search results\n    //       api.get(\"/name/\" + searchValue).then((res) => {\n    //         setCountryState({ countries: res.data });\n    //       });\n    //       console.log(\"error this condition is not taken into account in if statements\");\n    //     }\n    //   } else {\n    //     //LOAD FILTERED SEARCH RESULTS ****DUPLICATED****\n    //     api.get(\"/name/\" + searchValue + \"?region=\" + filterValue).then((res) => {\n    //       setCountryState({ countries: res.data });\n    //     });\n    //   }\n\n    // //FLOW WHEN TRIGGERED BY FILTER FIELD\n    // } else if (event.target.id === \"regionFilterDropDown\") {\n    //   filterValue = event.target.value;\n    //   console.log(searchValue);\n\n    //   //check if there is a search term as well\n    //   if (searchValue == null || searchValue === \"\") {\n    //     //LOAD region filter only\n    //     if (filterValue === \"All\") {\n    //       allCountries();\n    //     } else {\n    //       api.get(\"/region/\" + filterValue).then((res) => {\n    //         setCountryState({ countries: res.data });\n    //       });\n    //     }\n    //   } else {\n    //     //LOAD region filter applied to search results ****DUPLICATED****\n    //     api.get(\"/name/\" + searchValue + \"?region=\" + filterValue).then((res) => {\n    //       setCountryState({ countries: res.data });\n    //     });\n    //   }\n    // }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"topbar\">\n        <div className=\"title\">Where in the world?</div>\n        <div className=\"darkmode\">Dark Mode</div>\n      </div>\n\n      <div className=\"options\">\n        <Search search={update} />\n\n        <RegionFilter filter={update} />\n      </div>\n\n      <div className=\"countries-grid\">\n        {countryState.countries.map((country) => (\n          <CountryCard\n            key={country.numericCode}\n            name={country.name}\n            population={country.population}\n            region={country.region}\n            capital={country.capital}\n            flag={country.flag}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n//ADD EVENT MESSAGE WHEN NO MATCH TO A COUNTRY!!!**\n\n//https://restcountries.eu/rest/v2/name/TEXT?regionalbloc=eu\n\n//https://restcountries.eu/rest/v2/regionalbloc/eu\n","/Users/tylergumb/Dropbox/DEV stuff/axios-play/src/index.js",[],["31","32"],"/Users/tylergumb/Dropbox/DEV stuff/axios-play/src/CountryCard/CountryCard.js",[],"/Users/tylergumb/Dropbox/DEV stuff/axios-play/src/Search/Search.js",[],"/Users/tylergumb/Dropbox/DEV stuff/axios-play/src/RegionFilter/RegionFilter.js",[],{"ruleId":"33","severity":1,"message":"34","line":2,"column":8,"nodeType":"35","messageId":"36","endLine":2,"endColumn":12},{"ruleId":"37","severity":1,"message":"38","line":43,"column":7,"nodeType":"39","messageId":"40","endLine":43,"endColumn":73},{"ruleId":"37","severity":1,"message":"38","line":57,"column":7,"nodeType":"39","messageId":"40","endLine":57,"endColumn":57},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-global-assign","no-unsafe-negation"]